{"version":3,"file":"t4d-wnow-user-lib.js","sources":["../esm2015/projects/user-lib/src/lib/components/change-password-form/change-password-form.component.ts","../projects/user-lib/src/lib/models/CurrentUser.ts","../projects/user-lib/src/lib/services/users.service.ts","../esm2015/projects/user-lib/src/lib/components/current-user/current-user.component.ts","../esm2015/projects/user-lib/src/lib/components/login-form/login-form.component.ts","../esm2015/projects/user-lib/src/lib/components/user-profile/user-profile.component.ts","../projects/user-lib/src/lib/actions/current-user.actions.ts","../projects/user-lib/src/lib/services/current-user-state.service.ts","../../projects/user-lib/src/lib/user-lib.module.ts","../projects/user-lib/src/lib/services/allowed-roles-guard.service.ts","../projects/user-lib/src/lib/services/authorization-interceptor.service.ts","../projects/user-lib/src/lib/services/logged-in-guard.service.ts","../../../projects/user-lib/src/public-api.ts","../../../projects/user-lib/src/t4d-wnow-user-lib.ts"],"sourcesContent":["import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\n\nimport { ChangePasswordForm } from '../../models/ChangePasswordForm';\nimport { confirmValue } from '@t4d-wnow/shared-lib';\n\n@Component({\n  selector: 'app-change-password-form',\n  templateUrl: './change-password-form.component.html',\n  styleUrls: ['./change-password-form.component.css']\n})\nexport class ChangePasswordFormComponent implements OnInit {\n\n  @Output()\n  changePassword = new EventEmitter<ChangePasswordForm>();\n\n  changePasswordForm!: FormGroup;\n\n  constructor(private fb: FormBuilder) { }\n\n  ngOnInit(): void {\n    this.changePasswordForm = this.fb.group({\n      currentPassword: '',\n      newPassword: '',\n      confirmPassword: '',\n    }, { validators: [confirmValue('newPassword', 'confirmPassword')] });\n  }\n\n  public doChangePassword() {\n    if (this.changePasswordForm.valid) {\n      this.changePassword.emit(this.changePasswordForm.value);\n    }\n  }\n\n}\n","import { intersection } from 'lodash-es';\n\nexport interface ICurrentUser {\n  username: string;\n  userKind: string;\n  displayName: string;\n  roles: string[];\n}\n\nexport class CurrentUser implements ICurrentUser {\n\n  public username: string;\n  public userKind: string;\n  public displayName: string;\n  public roles: string[];\n\n  constructor(username: string, userKind: string, displayName: string) {\n    this.username = username;\n    this.userKind = userKind;\n    this.displayName = displayName;\n    this.roles = [];\n  }\n\n  public addRole(roleName: string): CurrentUser {\n    if (!roleName) throw new Error('role name cannot be empty');\n    this.roles.push(roleName);\n    return this;\n  }\n\n  public hasRole(roleNames: string[]): boolean {\n    return intersection(this.roles, roleNames).length > 0;\n  }\n\n}","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { tap, map } from 'rxjs/operators';\n\nimport { UserResult } from '../models/UserResult';\nimport { UserRefresh } from '../models/UserRefresh';\nimport { CurrentUser } from '../models/CurrentUser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UsersService {\n\n  private accessToken: string | null = null;\n  private currentUser: CurrentUser | null = null;\n\n  constructor(private httpClient: HttpClient) { }\n\n  public loginEmployee(username: string, password: string): Observable<CurrentUser> {\n\n    return this.httpClient\n      .post<UserResult>(\n        '/api/users/login',\n        { username, password, kind: 'employee' })\n      .pipe(\n        tap(userResult => {\n          this.accessToken = userResult.accessToken;\n          localStorage.refreshToken = userResult.refreshToken;\n        }),\n        map(userResult => {\n          const currentUser = new CurrentUser(userResult.username, userResult.userKind, userResult.displayName);\n          userResult.roles.forEach(role => currentUser.addRole(role));\n          return currentUser;\n        }),\n        tap(currentUser => {\n          this.currentUser = currentUser\n        }),\n      );\n  }\n\n  public refreshUser(): Observable<Observable<boolean>> {\n    return this.httpClient.get<UserRefresh>('/api/users/refresh').pipe(\n      tap(userRefresh => {\n        this.accessToken = userRefresh.accessToken;\n        localStorage.refreshToken = userRefresh.refreshToken;\n      }),\n      map(() => of(true)),\n    );\n  }\n\n  public changePassword(username: string, userKind: string, oldPassword: string, newPassword: string): Observable<{}> {\n    return this.httpClient.post<{}>(\n      '/api/users/change-password',\n      {\n        username, userKind, oldPassword, newPassword,\n      });\n  }\n\n  public getCurrentUser(): CurrentUser | null {\n    return this.currentUser;\n  }\n\n  public getAccessToken(): string | null {\n    return this.accessToken;\n  }\n\n  public getRefreshToken(): string | null {\n    return localStorage.refreshToken;\n  }\n\n  public logoutUser(): void {\n    this.accessToken = null;\n    this.currentUser = null;\n    localStorage.refreshToken = null;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { UsersService } from '../../services/users.service';\n\n@Component({\n  selector: 'app-current-user',\n  templateUrl: './current-user.component.html',\n  styleUrls: ['./current-user.component.css']\n})\nexport class CurrentUserComponent implements OnInit {\n\n  get loggedIn(): boolean {\n    return !!this.usersSvc.getCurrentUser();\n  }\n\n  get displayName(): string {\n    return this.usersSvc.getCurrentUser()?.displayName ?? '';\n  }\n\n  get username(): string {\n    return this.usersSvc.getCurrentUser()?.username ?? '';\n  }\n\n  constructor(private router: Router, private usersSvc: UsersService) { }\n\n  ngOnInit(): void {\n  }\n\n  public navigateToProfile(): Promise<boolean> {\n    return this.router.navigateByUrl('/profile');\n  }\n\n  public navigateToLogout(): Promise<boolean> {\n    return this.router.navigateByUrl('/logout');\n  }\n\n  public navigateToLogin(): Promise<boolean> {\n    return this.router.navigateByUrl('/login');\n  }\n\n}\n","import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { LoginForm } from '../../models/LoginForm';\n\n@Component({\n  selector: 'app-login-form',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.css']\n})\nexport class LoginFormComponent implements OnInit {\n\n  loginForm!: FormGroup;\n  loginFormSubmitted = false;\n\n  @Output()\n  login = new EventEmitter<LoginForm>();\n\n  @Output()\n  clear = new EventEmitter<void>();\n\n  get showLoginFormValidationSummary() {\n    return this.loginForm.invalid && this.loginFormSubmitted;\n  }\n\n  get showUsernameError() {\n    const usernameFormControl = this.loginForm.get('username');\n    return usernameFormControl!.invalid;\n  }\n\n  get showPasswordError() {\n    const passwordFormControl = this.loginForm.get('password');\n    return passwordFormControl!.invalid;\n  }\n\n  constructor(private fb: FormBuilder) { }\n\n  // username: 'adodsworth'\n  // password: 'testpass'\n\n  ngOnInit(): void {\n    this.loginForm = this.fb.group({\n      username: ['adodsworth', { validators: [Validators.required] }],\n      password: ['testpass', { validators: [Validators.required] }],\n    });\n  }\n\n  doLogin(): void {\n    this.loginFormSubmitted = true;\n    if (this.loginForm.invalid) return;\n    this.login.emit(this.loginForm!.value);\n  }\n\n  doClear(): void {\n    this.loginForm!.reset();\n    this.clear.emit();\n  }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\n\nimport { UserProfile } from '../../models/UserProfile';\n\n@Component({\n  selector: 'app-user-profile',\n  templateUrl: './user-profile.component.html',\n  styleUrls: ['./user-profile.component.css']\n})\nexport class UserProfileComponent implements OnInit {\n\n  @Input()\n  public userProfile: UserProfile | null = null;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { ICurrentUser } from '../models/CurrentUser';\n\nexport class SetCurrentUser {\n  static readonly type = '[User] Set Current User';\n  constructor(public currentUser: ICurrentUser) { }\n}\n\nexport class ClearCurrentUser {\n  static readonly type = '[User] Clear Current User';\n}\n\nexport class LoginUser {\n  static readonly type = '[User] Login User';\n  constructor(public username: string, public password: string) { }\n}\n\nexport class LogoutUser {\n  static readonly type = '[User] Logout User';\n}","import { Injectable } from '@angular/core';\nimport { State, Action, StateContext } from '@ngxs/store';\nimport { tap, catchError } from 'rxjs/operators';\n\nimport { CurrentUserState } from '../models/CurrentUserState';\nimport { SetCurrentUser, ClearCurrentUser, LoginUser, LogoutUser } from '../actions/current-user.actions';\nimport { UsersService } from '../services/users.service';\n\nimport { SetErrorMessage, ClearErrorMessage } from '@t4d-wnow/shared-lib';\n\n@State<CurrentUserState>({\n  name: 'currentUser',\n  defaults: {\n    username: '',\n    userKind: '',\n    displayName: '',\n    roles: [] as string[],\n  },\n})\n@Injectable({\n  providedIn: 'root'\n})\nexport class CurrentUserStateService {\n\n  constructor(private usersSvc: UsersService) { }\n\n  @Action(SetCurrentUser)\n  setCurrentUser(ctx: StateContext<CurrentUserState>, action: SetCurrentUser) {\n    ctx.patchState(action.currentUser);\n  }\n\n  @Action(ClearCurrentUser)\n  clearCurrentUser(ctx: StateContext<CurrentUserState>) {\n    ctx.patchState({\n      username: '',\n      userKind: '',\n      displayName: '',\n      roles: [] as string[],\n    });\n  }\n\n  @Action(LoginUser)\n  loginUser(ctx: StateContext<CurrentUserState>, action: LoginUser) {\n\n    return this.usersSvc.loginEmployee(action.username, action.password).pipe(\n      tap(() => {\n        const currentUser = this.usersSvc.getCurrentUser();\n        if (currentUser) {\n          ctx.dispatch([\n            new SetCurrentUser(currentUser),\n            new ClearErrorMessage(),\n          ]);\n        } else {\n          ctx.dispatch([\n            new ClearCurrentUser(),\n            new SetErrorMessage('Unable to retrieve current user.'),\n          ]);\n        }\n      }),\n      catchError((err: any) => {\n        if (err.status === 404) {\n          ctx.dispatch([\n            new ClearCurrentUser(),\n            new SetErrorMessage('Username and password not found.'),\n          ]);\n        } else {\n          ctx.dispatch([\n            new ClearCurrentUser(),\n            new SetErrorMessage('Unknown login error.'),\n          ]);\n        }\n        return err;\n      }),\n    );\n  }\n\n  @Action(LogoutUser)\n  logoutUser(ctx: StateContext<CurrentUserState>) {\n    ctx.dispatch([\n      new ClearCurrentUser(),\n      new ClearErrorMessage(),\n    ]);\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { MatListModule } from '@angular/material/list';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatSnackBarModule } from '@angular/material/snack-bar'\n\nimport { NgxsModule } from '@ngxs/store';\n\nimport { ChangePasswordFormComponent } from './components/change-password-form/change-password-form.component';\nimport { CurrentUserComponent } from './components/current-user/current-user.component';\nimport { LoginFormComponent } from './components/login-form/login-form.component';\nimport { UserProfileComponent } from './components/user-profile/user-profile.component';\nimport { CurrentUserStateService } from './services/current-user-state.service';\n\nexport const NgxsFeatureModule = NgxsModule.forFeature([CurrentUserStateService]);\n\n@NgModule({\n  declarations: [\n    ChangePasswordFormComponent,\n    CurrentUserComponent,\n    LoginFormComponent,\n    UserProfileComponent,\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    MatListModule,\n    MatToolbarModule,\n    MatSidenavModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatMenuModule,\n    MatTableModule,\n    MatSnackBarModule,\n    NgxsFeatureModule,\n  ],\n  exports: [\n    ChangePasswordFormComponent,\n    CurrentUserComponent,\n    LoginFormComponent,\n    UserProfileComponent,\n  ],\n})\nexport class UserLibModule { }\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { UsersService } from '../services/users.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AllowedRolesGuardService implements CanActivate {\n\n  constructor(private usersSvc: UsersService, private snackBar: MatSnackBar) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot)\n    : boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\n\n    if (!this.usersSvc.getCurrentUser()?.hasRole(route.data.roles)) {\n      const snackBarRef = this.snackBar.open(\n        `You are not allowed to navigate to the ${route.data.title}.`,\n        'Dismiss');\n      snackBarRef.onAction().subscribe(() => {\n        snackBarRef.dismiss();\n      });\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { UsersService } from './users.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorizationInterceptorService implements HttpInterceptor {\n\n  constructor(private usersSvc: UsersService) { }\n\n  withAccessToken(req: HttpRequest<any>): HttpRequest<any> {\n    return req.clone({\n      headers: req.headers.set(\n        'Authorization',\n        'Bearer ' + this.usersSvc.getAccessToken(),\n      ),\n    });\n  }\n\n  withRefreshToken(req: HttpRequest<any>): HttpRequest<any> {\n    return req.clone({\n      method: 'GET',\n      headers: req.headers.set(\n        'Authorization',\n        'Bearer ' + this.usersSvc.getRefreshToken(),\n      ),\n    });\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    if (req.url.endsWith('/api/users/login')) {\n      return next.handle(req);\n    }\n\n    if (req.url.endsWith('/api/users/refresh')) {\n      return next.handle(this.withRefreshToken(req));\n    }\n\n    return next.handle(this.withAccessToken(req)).pipe(\n      catchError((err, caught) => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 401) {\n            return this.usersSvc.refreshUser()\n              .pipe(\n                switchMap(() => next.handle(this.withAccessToken(req)))\n              );\n          } else {\n            return throwError(err);\n          }\n        }\n        return caught;\n      })\n    );\n\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot, CanActivate,\n  RouterStateSnapshot, UrlTree, Router\n} from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { UsersService } from './users.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggedInGuardService implements CanActivate {\n\n  constructor(private usersSvc: UsersService, private router: Router) { }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot):\n    boolean | UrlTree | Observable<boolean | UrlTree> | Promise<boolean | UrlTree> {\n\n      if (!this.usersSvc.getCurrentUser()) {\n        return this.router.parseUrl('/login');\n      } else {\n        return true;\n      }\n\n  }\n}\n","/*\n * Public API Surface of user-lib\n */\n\nexport * from './lib/user-lib.module';\n\nexport * from './lib/components/change-password-form/change-password-form.component';\nexport * from './lib/components/current-user/current-user.component';\nexport * from './lib/components/login-form/login-form.component';\nexport * from './lib/components/user-profile/user-profile.component';\n\nexport * from './lib/models/ChangePasswordForm';\nexport * from './lib/models/CurrentUser';\nexport * from './lib/models/LoginForm';\nexport * from './lib/models/UserProfile';\nexport * from './lib/models/UserRefresh';\nexport * from './lib/models/UserResult';\nexport * from './lib/models/CurrentUserState';\n\nexport * from './lib/actions/current-user.actions';\n\nexport * from './lib/services/allowed-roles-guard.service';\nexport * from './lib/services/authorization-interceptor.service';\nexport * from './lib/services/logged-in-guard.service';\nexport * from './lib/services/users.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {CurrentUserStateService as ɵa} from './lib/services/current-user-state.service';"],"names":[],"mappings":"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"}